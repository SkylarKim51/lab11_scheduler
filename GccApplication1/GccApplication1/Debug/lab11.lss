
lab11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000043a  000004ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000043a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800104  00800104  000004d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b9e  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000099e  00000000  00000000  00001152  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000575  00000000  00000000  00001af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00002068  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000527  00000000  00000000  0000216c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b9  00000000  00000000  00002693  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002a4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>
   2:	00 00       	nop
   4:	a5 c0       	rjmp	.+330    	; 0x150 <__bad_interrupt>
   6:	00 00       	nop
   8:	a3 c0       	rjmp	.+326    	; 0x150 <__bad_interrupt>
   a:	00 00       	nop
   c:	a1 c0       	rjmp	.+322    	; 0x150 <__bad_interrupt>
   e:	00 00       	nop
  10:	9f c0       	rjmp	.+318    	; 0x150 <__bad_interrupt>
  12:	00 00       	nop
  14:	9d c0       	rjmp	.+314    	; 0x150 <__bad_interrupt>
  16:	00 00       	nop
  18:	9b c0       	rjmp	.+310    	; 0x150 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	99 c0       	rjmp	.+306    	; 0x150 <__bad_interrupt>
  1e:	00 00       	nop
  20:	97 c0       	rjmp	.+302    	; 0x150 <__bad_interrupt>
  22:	00 00       	nop
  24:	95 c0       	rjmp	.+298    	; 0x150 <__bad_interrupt>
  26:	00 00       	nop
  28:	93 c0       	rjmp	.+294    	; 0x150 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	91 c0       	rjmp	.+290    	; 0x150 <__bad_interrupt>
  2e:	00 00       	nop
  30:	8f c0       	rjmp	.+286    	; 0x150 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c1       	rjmp	.+732    	; 0x312 <__vector_13>
  36:	00 00       	nop
  38:	8b c0       	rjmp	.+278    	; 0x150 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	89 c0       	rjmp	.+274    	; 0x150 <__bad_interrupt>
  3e:	00 00       	nop
  40:	87 c0       	rjmp	.+270    	; 0x150 <__bad_interrupt>
  42:	00 00       	nop
  44:	85 c0       	rjmp	.+266    	; 0x150 <__bad_interrupt>
  46:	00 00       	nop
  48:	83 c0       	rjmp	.+262    	; 0x150 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	81 c0       	rjmp	.+258    	; 0x150 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7f c0       	rjmp	.+254    	; 0x150 <__bad_interrupt>
  52:	00 00       	nop
  54:	7d c0       	rjmp	.+250    	; 0x150 <__bad_interrupt>
  56:	00 00       	nop
  58:	7b c0       	rjmp	.+246    	; 0x150 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	79 c0       	rjmp	.+242    	; 0x150 <__bad_interrupt>
  5e:	00 00       	nop
  60:	77 c0       	rjmp	.+238    	; 0x150 <__bad_interrupt>
  62:	00 00       	nop
  64:	75 c0       	rjmp	.+234    	; 0x150 <__bad_interrupt>
  66:	00 00       	nop
  68:	73 c0       	rjmp	.+230    	; 0x150 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	71 c0       	rjmp	.+226    	; 0x150 <__bad_interrupt>
  6e:	00 00       	nop
  70:	6f c0       	rjmp	.+222    	; 0x150 <__bad_interrupt>
  72:	00 00       	nop
  74:	6d c0       	rjmp	.+218    	; 0x150 <__bad_interrupt>
  76:	00 00       	nop
  78:	6b c0       	rjmp	.+214    	; 0x150 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	69 c0       	rjmp	.+210    	; 0x150 <__bad_interrupt>
  7e:	00 00       	nop
  80:	67 c0       	rjmp	.+206    	; 0x150 <__bad_interrupt>
  82:	00 00       	nop
  84:	65 c0       	rjmp	.+202    	; 0x150 <__bad_interrupt>
  86:	00 00       	nop
  88:	63 c0       	rjmp	.+198    	; 0x150 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	07 01       	movw	r0, r14
  8e:	4a 01       	movw	r8, r20
  90:	4a 01       	movw	r8, r20
  92:	4a 01       	movw	r8, r20
  94:	4a 01       	movw	r8, r20
  96:	4a 01       	movw	r8, r20
  98:	4a 01       	movw	r8, r20
  9a:	4a 01       	movw	r8, r20
  9c:	4a 01       	movw	r8, r20
  9e:	4a 01       	movw	r8, r20
  a0:	4a 01       	movw	r8, r20
  a2:	4a 01       	movw	r8, r20
  a4:	4a 01       	movw	r8, r20
  a6:	4a 01       	movw	r8, r20
  a8:	4a 01       	movw	r8, r20
  aa:	4a 01       	movw	r8, r20
  ac:	4a 01       	movw	r8, r20
  ae:	4a 01       	movw	r8, r20
  b0:	4a 01       	movw	r8, r20
  b2:	4a 01       	movw	r8, r20
  b4:	4a 01       	movw	r8, r20
  b6:	4a 01       	movw	r8, r20
  b8:	4a 01       	movw	r8, r20
  ba:	4a 01       	movw	r8, r20
  bc:	4a 01       	movw	r8, r20
  be:	4a 01       	movw	r8, r20
  c0:	4a 01       	movw	r8, r20
  c2:	4a 01       	movw	r8, r20
  c4:	4a 01       	movw	r8, r20
  c6:	4a 01       	movw	r8, r20
  c8:	4a 01       	movw	r8, r20
  ca:	4a 01       	movw	r8, r20
  cc:	4a 01       	movw	r8, r20
  ce:	4a 01       	movw	r8, r20
  d0:	4a 01       	movw	r8, r20
  d2:	46 01       	movw	r8, r12
  d4:	4a 01       	movw	r8, r20
  d6:	4a 01       	movw	r8, r20
  d8:	4a 01       	movw	r8, r20
  da:	4a 01       	movw	r8, r20
  dc:	4a 01       	movw	r8, r20
  de:	4a 01       	movw	r8, r20
  e0:	3f 01       	movw	r6, r30
  e2:	4a 01       	movw	r8, r20
  e4:	4a 01       	movw	r8, r20
  e6:	4a 01       	movw	r8, r20
  e8:	4a 01       	movw	r8, r20
  ea:	4a 01       	movw	r8, r20
  ec:	43 01       	movw	r8, r6
  ee:	0b 01       	movw	r0, r22
  f0:	0f 01       	movw	r0, r30
  f2:	13 01       	movw	r2, r6
  f4:	17 01       	movw	r2, r14
  f6:	1b 01       	movw	r2, r22
  f8:	1f 01       	movw	r2, r30
  fa:	23 01       	movw	r4, r6
  fc:	27 01       	movw	r4, r14
  fe:	2b 01       	movw	r4, r22
 100:	4a 01       	movw	r8, r20
 102:	4a 01       	movw	r8, r20
 104:	4a 01       	movw	r8, r20
 106:	4a 01       	movw	r8, r20
 108:	4a 01       	movw	r8, r20
 10a:	4a 01       	movw	r8, r20
 10c:	4a 01       	movw	r8, r20
 10e:	2f 01       	movw	r4, r30
 110:	33 01       	movw	r6, r6
 112:	37 01       	movw	r6, r14
 114:	3b 01       	movw	r6, r22

00000116 <__ctors_end>:
 116:	11 24       	eor	r1, r1
 118:	1f be       	out	0x3f, r1	; 63
 11a:	cf ef       	ldi	r28, 0xFF	; 255
 11c:	d0 e4       	ldi	r29, 0x40	; 64
 11e:	de bf       	out	0x3e, r29	; 62
 120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
 122:	11 e0       	ldi	r17, 0x01	; 1
 124:	a0 e0       	ldi	r26, 0x00	; 0
 126:	b1 e0       	ldi	r27, 0x01	; 1
 128:	ea e3       	ldi	r30, 0x3A	; 58
 12a:	f4 e0       	ldi	r31, 0x04	; 4
 12c:	00 e0       	ldi	r16, 0x00	; 0
 12e:	0b bf       	out	0x3b, r16	; 59
 130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
 132:	07 90       	elpm	r0, Z+
 134:	0d 92       	st	X+, r0
 136:	a4 30       	cpi	r26, 0x04	; 4
 138:	b1 07       	cpc	r27, r17
 13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	a4 e0       	ldi	r26, 0x04	; 4
 140:	b1 e0       	ldi	r27, 0x01	; 1
 142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
 144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
 146:	a5 31       	cpi	r26, 0x15	; 21
 148:	b2 07       	cpc	r27, r18
 14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
 14c:	1e d1       	rcall	.+572    	; 0x38a <main>
 14e:	73 c1       	rjmp	.+742    	; 0x436 <_exit>

00000150 <__bad_interrupt>:
 150:	57 cf       	rjmp	.-338    	; 0x0 <__vectors>

00000152 <GetKeypadKey>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 152:	8f ee       	ldi	r24, 0xEF	; 239
 154:	88 b9       	out	0x08, r24	; 8
 156:	00 00       	nop
 158:	30 9b       	sbis	0x06, 0	; 6
 15a:	29 c0       	rjmp	.+82     	; 0x1ae <GetKeypadKey+0x5c>
 15c:	31 9b       	sbis	0x06, 1	; 6
 15e:	29 c0       	rjmp	.+82     	; 0x1b2 <GetKeypadKey+0x60>
 160:	32 9b       	sbis	0x06, 2	; 6
 162:	29 c0       	rjmp	.+82     	; 0x1b6 <GetKeypadKey+0x64>
 164:	33 9b       	sbis	0x06, 3	; 6
 166:	29 c0       	rjmp	.+82     	; 0x1ba <GetKeypadKey+0x68>
 168:	8f ed       	ldi	r24, 0xDF	; 223
 16a:	88 b9       	out	0x08, r24	; 8
 16c:	00 00       	nop
 16e:	30 9b       	sbis	0x06, 0	; 6
 170:	26 c0       	rjmp	.+76     	; 0x1be <GetKeypadKey+0x6c>
 172:	31 9b       	sbis	0x06, 1	; 6
 174:	26 c0       	rjmp	.+76     	; 0x1c2 <GetKeypadKey+0x70>
 176:	32 9b       	sbis	0x06, 2	; 6
 178:	26 c0       	rjmp	.+76     	; 0x1c6 <GetKeypadKey+0x74>
 17a:	33 9b       	sbis	0x06, 3	; 6
 17c:	26 c0       	rjmp	.+76     	; 0x1ca <GetKeypadKey+0x78>
 17e:	8f eb       	ldi	r24, 0xBF	; 191
 180:	88 b9       	out	0x08, r24	; 8
 182:	00 00       	nop
 184:	30 9b       	sbis	0x06, 0	; 6
 186:	23 c0       	rjmp	.+70     	; 0x1ce <GetKeypadKey+0x7c>
 188:	31 9b       	sbis	0x06, 1	; 6
 18a:	23 c0       	rjmp	.+70     	; 0x1d2 <GetKeypadKey+0x80>
 18c:	32 9b       	sbis	0x06, 2	; 6
 18e:	23 c0       	rjmp	.+70     	; 0x1d6 <GetKeypadKey+0x84>
 190:	33 9b       	sbis	0x06, 3	; 6
 192:	23 c0       	rjmp	.+70     	; 0x1da <GetKeypadKey+0x88>
 194:	8f e7       	ldi	r24, 0x7F	; 127
 196:	88 b9       	out	0x08, r24	; 8
 198:	00 00       	nop
 19a:	30 9b       	sbis	0x06, 0	; 6
 19c:	20 c0       	rjmp	.+64     	; 0x1de <GetKeypadKey+0x8c>
 19e:	31 9b       	sbis	0x06, 1	; 6
 1a0:	20 c0       	rjmp	.+64     	; 0x1e2 <GetKeypadKey+0x90>
 1a2:	32 9b       	sbis	0x06, 2	; 6
 1a4:	20 c0       	rjmp	.+64     	; 0x1e6 <GetKeypadKey+0x94>
 1a6:	33 9b       	sbis	0x06, 3	; 6
 1a8:	20 c0       	rjmp	.+64     	; 0x1ea <GetKeypadKey+0x98>
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret
 1ae:	81 e3       	ldi	r24, 0x31	; 49
 1b0:	08 95       	ret
 1b2:	84 e3       	ldi	r24, 0x34	; 52
 1b4:	08 95       	ret
 1b6:	87 e3       	ldi	r24, 0x37	; 55
 1b8:	08 95       	ret
 1ba:	8a e2       	ldi	r24, 0x2A	; 42
 1bc:	08 95       	ret
 1be:	82 e3       	ldi	r24, 0x32	; 50
 1c0:	08 95       	ret
 1c2:	85 e3       	ldi	r24, 0x35	; 53
 1c4:	08 95       	ret
 1c6:	88 e3       	ldi	r24, 0x38	; 56
 1c8:	08 95       	ret
 1ca:	80 e3       	ldi	r24, 0x30	; 48
 1cc:	08 95       	ret
 1ce:	83 e3       	ldi	r24, 0x33	; 51
 1d0:	08 95       	ret
 1d2:	86 e3       	ldi	r24, 0x36	; 54
 1d4:	08 95       	ret
 1d6:	89 e3       	ldi	r24, 0x39	; 57
 1d8:	08 95       	ret
 1da:	83 e2       	ldi	r24, 0x23	; 35
 1dc:	08 95       	ret
 1de:	81 e4       	ldi	r24, 0x41	; 65
 1e0:	08 95       	ret
 1e2:	82 e4       	ldi	r24, 0x42	; 66
 1e4:	08 95       	ret
 1e6:	83 e4       	ldi	r24, 0x43	; 67
 1e8:	08 95       	ret
 1ea:	84 e4       	ldi	r24, 0x44	; 68
 1ec:	08 95       	ret

000001ee <SMTick1>:
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	ec 01       	movw	r28, r24
 1f4:	ae df       	rcall	.-164    	; 0x152 <GetKeypadKey>
 1f6:	20 97       	sbiw	r28, 0x00	; 0
 1f8:	09 f0       	breq	.+2      	; 0x1fc <SMTick1+0xe>
 1fa:	52 c0       	rjmp	.+164    	; 0x2a0 <SMTick1+0xb2>
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	85 34       	cpi	r24, 0x45	; 69
 200:	91 05       	cpc	r25, r1
 202:	08 f0       	brcs	.+2      	; 0x206 <SMTick1+0x18>
 204:	47 c0       	rjmp	.+142    	; 0x294 <SMTick1+0xa6>
 206:	fc 01       	movw	r30, r24
 208:	ea 5b       	subi	r30, 0xBA	; 186
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
 20c:	0b c1       	rjmp	.+534    	; 0x424 <__tablejump2__>
 20e:	8f e1       	ldi	r24, 0x1F	; 31
 210:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 214:	42 c0       	rjmp	.+132    	; 0x29a <SMTick1+0xac>
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 21c:	3e c0       	rjmp	.+124    	; 0x29a <SMTick1+0xac>
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 224:	3a c0       	rjmp	.+116    	; 0x29a <SMTick1+0xac>
 226:	83 e0       	ldi	r24, 0x03	; 3
 228:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 22c:	36 c0       	rjmp	.+108    	; 0x29a <SMTick1+0xac>
 22e:	84 e0       	ldi	r24, 0x04	; 4
 230:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 234:	32 c0       	rjmp	.+100    	; 0x29a <SMTick1+0xac>
 236:	85 e0       	ldi	r24, 0x05	; 5
 238:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 23c:	2e c0       	rjmp	.+92     	; 0x29a <SMTick1+0xac>
 23e:	86 e0       	ldi	r24, 0x06	; 6
 240:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 244:	2a c0       	rjmp	.+84     	; 0x29a <SMTick1+0xac>
 246:	87 e0       	ldi	r24, 0x07	; 7
 248:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 24c:	26 c0       	rjmp	.+76     	; 0x29a <SMTick1+0xac>
 24e:	88 e0       	ldi	r24, 0x08	; 8
 250:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 254:	22 c0       	rjmp	.+68     	; 0x29a <SMTick1+0xac>
 256:	89 e0       	ldi	r24, 0x09	; 9
 258:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 25c:	1e c0       	rjmp	.+60     	; 0x29a <SMTick1+0xac>
 25e:	8a e0       	ldi	r24, 0x0A	; 10
 260:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 264:	1a c0       	rjmp	.+52     	; 0x29a <SMTick1+0xac>
 266:	8b e0       	ldi	r24, 0x0B	; 11
 268:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 26c:	16 c0       	rjmp	.+44     	; 0x29a <SMTick1+0xac>
 26e:	8c e0       	ldi	r24, 0x0C	; 12
 270:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 274:	12 c0       	rjmp	.+36     	; 0x29a <SMTick1+0xac>
 276:	8d e0       	ldi	r24, 0x0D	; 13
 278:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 27c:	0e c0       	rjmp	.+28     	; 0x29a <SMTick1+0xac>
 27e:	8e e0       	ldi	r24, 0x0E	; 14
 280:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 284:	0a c0       	rjmp	.+20     	; 0x29a <SMTick1+0xac>
 286:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <tmpB>
 28a:	07 c0       	rjmp	.+14     	; 0x29a <SMTick1+0xac>
 28c:	8f e0       	ldi	r24, 0x0F	; 15
 28e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 292:	03 c0       	rjmp	.+6      	; 0x29a <SMTick1+0xac>
 294:	8b e1       	ldi	r24, 0x1B	; 27
 296:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 29a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmpB>
 29e:	85 b9       	out	0x05, r24	; 5
 2a0:	ce 01       	movw	r24, r28
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <TimerSet>:
 2a8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ac:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2b0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2b4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2b8:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <_avr_timer_cntcurr>
 2bc:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <_avr_timer_cntcurr+0x1>
 2c0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_avr_timer_cntcurr+0x2>
 2c4:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_avr_timer_cntcurr+0x3>
 2c8:	08 95       	ret

000002ca <TimerOn>:
 2ca:	8b e0       	ldi	r24, 0x0B	; 11
 2cc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2d0:	8d e7       	ldi	r24, 0x7D	; 125
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2d8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2dc:	82 e0       	ldi	r24, 0x02	; 2
 2de:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 2e2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2e6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2f2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2f6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2fa:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_avr_timer_cntcurr>
 2fe:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_avr_timer_cntcurr+0x1>
 302:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <_avr_timer_cntcurr+0x2>
 306:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <_avr_timer_cntcurr+0x3>
 30a:	8f b7       	in	r24, 0x3f	; 63
 30c:	80 68       	ori	r24, 0x80	; 128
 30e:	8f bf       	out	0x3f, r24	; 63
 310:	08 95       	ret

00000312 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	0f 92       	push	r0
 31a:	11 24       	eor	r1, r1
 31c:	8f 93       	push	r24
 31e:	9f 93       	push	r25
 320:	af 93       	push	r26
 322:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 324:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_avr_timer_cntcurr>
 328:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_avr_timer_cntcurr+0x1>
 32c:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x2>
 330:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_avr_timer_cntcurr+0x3>
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	a1 09       	sbc	r26, r1
 338:	b1 09       	sbc	r27, r1
 33a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_avr_timer_cntcurr>
 33e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_avr_timer_cntcurr+0x1>
 342:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <_avr_timer_cntcurr+0x2>
 346:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 34a:	89 2b       	or	r24, r25
 34c:	8a 2b       	or	r24, r26
 34e:	8b 2b       	or	r24, r27
 350:	99 f4       	brne	.+38     	; 0x378 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 358:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 35c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 360:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 364:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 368:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_avr_timer_cntcurr>
 36c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_avr_timer_cntcurr+0x1>
 370:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <_avr_timer_cntcurr+0x2>
 374:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <_avr_timer_cntcurr+0x3>
	}
}
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <main>:
}


int main(void)
{
	DDRB = 0xFF;	PORTB = 0x00;
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	84 b9       	out	0x04, r24	; 4
 38e:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xF0;	PORTC = 0x0F;
 390:	80 ef       	ldi	r24, 0xF0	; 240
 392:	87 b9       	out	0x07, r24	; 7
 394:	8f e0       	ldi	r24, 0x0F	; 15
 396:	88 b9       	out	0x08, r24	; 8
	static task task1;
	task *tasks[] = { &task1};
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	// Task 1
	task1.state = 0;//Task initial state.
 398:	e4 e0       	ldi	r30, 0x04	; 4
 39a:	f1 e0       	ldi	r31, 0x01	; 1
 39c:	10 82       	st	Z, r1
	task1.period = SMTick1_period;//Task Period.
 39e:	82 e0       	ldi	r24, 0x02	; 2
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	a0 e0       	ldi	r26, 0x00	; 0
 3a4:	b0 e0       	ldi	r27, 0x00	; 0
 3a6:	81 83       	std	Z+1, r24	; 0x01
 3a8:	92 83       	std	Z+2, r25	; 0x02
 3aa:	a3 83       	std	Z+3, r26	; 0x03
 3ac:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 3ae:	85 83       	std	Z+5, r24	; 0x05
 3b0:	96 83       	std	Z+6, r25	; 0x06
 3b2:	a7 83       	std	Z+7, r26	; 0x07
 3b4:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &SMTick1;//Function pointer for the tick.
 3b6:	87 ef       	ldi	r24, 0xF7	; 247
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	92 87       	std	Z+10, r25	; 0x0a
 3bc:	81 87       	std	Z+9, r24	; 0x09


	// Set the timer and turn it on
	TimerSet(GCD);
 3be:	6a e0       	ldi	r22, 0x0A	; 10
 3c0:	70 e0       	ldi	r23, 0x00	; 0
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	70 df       	rcall	.-288    	; 0x2a8 <TimerSet>
	TimerOn();
 3c8:	80 df       	rcall	.-256    	; 0x2ca <TimerOn>
 3ca:	c4 e0       	ldi	r28, 0x04	; 4
    while (1) 
    {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 3cc:	d1 e0       	ldi	r29, 0x01	; 1
 3ce:	4d 81       	ldd	r20, Y+5	; 0x05
 3d0:	5e 81       	ldd	r21, Y+6	; 0x06
 3d2:	6f 81       	ldd	r22, Y+7	; 0x07
 3d4:	78 85       	ldd	r23, Y+8	; 0x08
 3d6:	89 81       	ldd	r24, Y+1	; 0x01
 3d8:	9a 81       	ldd	r25, Y+2	; 0x02
 3da:	ab 81       	ldd	r26, Y+3	; 0x03
 3dc:	bc 81       	ldd	r27, Y+4	; 0x04
 3de:	48 17       	cp	r20, r24
 3e0:	59 07       	cpc	r21, r25
 3e2:	6a 07       	cpc	r22, r26
 3e4:	7b 07       	cpc	r23, r27
 3e6:	61 f4       	brne	.+24     	; 0x400 <__LOCK_REGION_LENGTH__>
 3e8:	88 81       	ld	r24, Y
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 3ea:	e9 85       	ldd	r30, Y+9	; 0x09
 3ec:	fa 85       	ldd	r31, Y+10	; 0x0a
 3ee:	08 2e       	mov	r0, r24
 3f0:	00 0c       	add	r0, r0
 3f2:	99 0b       	sbc	r25, r25
 3f4:	09 95       	icall
 3f6:	88 83       	st	Y, r24
 3f8:	1d 82       	std	Y+5, r1	; 0x05
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 3fa:	1e 82       	std	Y+6, r1	; 0x06
 3fc:	1f 82       	std	Y+7, r1	; 0x07
 3fe:	18 86       	std	Y+8, r1	; 0x08
 400:	8d 81       	ldd	r24, Y+5	; 0x05
			}
			tasks[i]->elapsedTime += 1;
 402:	9e 81       	ldd	r25, Y+6	; 0x06
 404:	af 81       	ldd	r26, Y+7	; 0x07
 406:	b8 85       	ldd	r27, Y+8	; 0x08
 408:	01 96       	adiw	r24, 0x01	; 1
 40a:	a1 1d       	adc	r26, r1
 40c:	b1 1d       	adc	r27, r1
 40e:	8d 83       	std	Y+5, r24	; 0x05
 410:	9e 83       	std	Y+6, r25	; 0x06
 412:	af 83       	std	Y+7, r26	; 0x07
 414:	b8 87       	std	Y+8, r27	; 0x08
 416:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <TimerFlag>
		}
		while(!TimerFlag);
 41a:	88 23       	and	r24, r24
 41c:	e1 f3       	breq	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <TimerFlag>
		TimerFlag = 0;				
 422:	d5 cf       	rjmp	.-86     	; 0x3ce <main+0x44>

00000424 <__tablejump2__>:
    }
 424:	ee 0f       	add	r30, r30
 426:	ff 1f       	adc	r31, r31
 428:	00 24       	eor	r0, r0
 42a:	00 1c       	adc	r0, r0
 42c:	0b be       	out	0x3b, r0	; 59
 42e:	07 90       	elpm	r0, Z+
 430:	f6 91       	elpm	r31, Z
 432:	e0 2d       	mov	r30, r0
 434:	09 94       	ijmp

00000436 <_exit>:
 436:	f8 94       	cli

00000438 <__stop_program>:
 438:	ff cf       	rjmp	.-2      	; 0x438 <__stop_program>
